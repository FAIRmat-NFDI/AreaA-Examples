#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.parsing.tabular import TableData
from nomad.datamodel.data import EntryData
from nomad.datamodel.metainfo.basesections import Measurement
from nomad.datamodel.metainfo.basesections import MeasurementResult
from nomad.datamodel.metainfo.plot import PlotSection
from nomad.datamodel.metainfo.basesections import Process
from nomad.datamodel.metainfo.basesections import ProcessStep
import numpy as np
from structlog.stdlib import (
    BoundLogger,
)
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)

m_package = Package(name='User Meeting Test ELN')


class TemperatureRamp(ProcessStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "properties": {
                "order": [
                    "name",
                    "start_time",
                    "initial_temperature",
                    "final_temperature",
                    "duration",
                    "comment"
                ]
            }
        },)
    initial_temperature = Quantity(
        type=np.float64,
        description='initial temperature set for ramp',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    final_temperature = Quantity(
        type=np.float64,
        description='final temperature set for ramp',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `TemperatureRamp` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super(TemperatureRamp, self).normalize(archive, logger)


class Sintering(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    steps = SubSection(
        section_def=TemperatureRamp,
        repeats=True,
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `Sintering` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super(Sintering, self).normalize(archive, logger)


class XRDmeasurementResults(
        MeasurementResult,
        PlotSection,
        TableData,
        ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,
        a_plotly_graph_object=[
            {
                "data": {
                    "x": "#two_theta",
                    "y": "#intensity"
                },
                "layout": {
                    "title": {
                        "text": "2Theta scan"
                    }
                },
                "label": "2Theta scan",
                "index": 1
            },
            {
                "data": {
                    "x": "#q",
                    "y": "#intensity"
                },
                "layout": {
                    "title": {
                        "text": "Scattering vector"
                    }
                },
                "label": "Scattering vector",
                "index": 1
            }
        ],)
    data_file = Quantity(
        type=str,
        description='Upload here the spreadsheet file containing the XRD data',
        a_tabular_parser={
            "parsing_options": {
                "comment": "#"
            },
            "mapping_options": [
                {
                    "mapping_mode": "column",
                    "file_mode": "current_entry",
                    "sections": [
                        "#root"
                    ]
                }
            ]
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    q = Quantity(
        type=np.float64,
        description='Scattering vector',
        unit="meter**(-1)",
        shape=["*"],
    )
    wavelength = Quantity(
        type=np.float,
        unit="meter",
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "angstrom",
        },
    )
    two_theta = Quantity(
        type=np.float64,
        description='2theta',
        a_tabular={
            "name": "two_theta"
        },
        unit="degree",
        shape=["*"],
    )
    intensity = Quantity(
        type=np.float64,
        description='Counts per second',
        a_tabular={
            "name": "CPS"
        },
        shape=["*"],
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `XRDmeasurementResults` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super(XRDmeasurementResults, self).normalize(archive, logger)
        if self.two_theta is not None and self.wavelength is not None:
            self.q = (4 * np.pi / self.wavelength) * np.sin(np.deg2rad(self.two_theta) / 2)


class XRDmeasurement(Measurement, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln=None,)
    results = SubSection(
        section_def=XRDmeasurementResults,
        repeats=True,
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `XRDmeasurement` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super(XRDmeasurement, self).normalize(archive, logger)


m_package.__init_metainfo__()
